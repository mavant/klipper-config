[gcode_macro PARK_OR_HOME]
description: If homed, park the toolhead by moving up Z and to the XY center. Failing that, home.
variable_default_z_raise: 15.0
variable_minimum_z_raise: 1.0
gcode:
  {% set z_target_relative = [ params.Z|default(default_z_raise)|float, minimum_z_raise]|max %}
  {% set z_target_absolute = z_target_relative + printer.toolhead.position.z %}
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="Unable to park: Not already homed. Homing instead."
    G28
  {% elif z_target_absolute >= printer.toolhead.axis_maximum.z %}
    RESPOND MSG="Unable to park: Too close to Z maximum. Homing instead."
    G28
  {% else %}
    SAVE_GCODE_STATE NAME=park_or_home_state

    G91                                 # Relative positions
    G0 Z+{minimum_z_raise}  F300        # Slowly raise up a little bit so that the next move can't hit anything
    M400                                # Wait for that to complete
    G90                                 # Absolute positions
    G0 X0 Y0 Z{z_target_absolute} F6000 # Quickly move to center

    # pausing at center seems okay, but I do wish it were easy to automatically
    # find a valid position outside the object being printed in case of drips.
    # It looks like superslicer/prusaslicer is able to give some hints about the area
    # actually in use to the start macro; could try that.
    # Or could figure out a generic park location that is known to always be outside
    # the print plate; you'll need one anyway for auto-probe stuff... 

    RESTORE_GCODE_STATE NAME=park_or_home_state
  {% endif %}
